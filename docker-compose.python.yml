version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: reddit-recipes-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: recipes
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    command: postgres -c max_connections=200 -c shared_buffers=256MB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d recipes"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reddit-recipes-network

  # Elasticsearch for search and recommendations
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: recipes-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - reddit-recipes-network

  # Optional: Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: recipes-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - reddit-recipes-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: reddit-recipes-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@redditrecipes.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - reddit-recipes-network

  # Temporal server
  temporal:
    image: temporalio/auto-setup:1.20.0
    container_name: recipes-temporal
    restart: unless-stopped
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=postgres
      - POSTGRES_SEEDS=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - reddit-recipes-network

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.26.0
    container_name: recipes-temporal-ui
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    depends_on:
      - temporal
    networks:
      - reddit-recipes-network

  # Python recipes worker (commented out - run locally with: python -m recipes.worker)
  # recipes-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.worker
  #   container_name: recipes-worker
  #   restart: unless-stopped
  #   environment:
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_NAME=recipes
  #     - DB_USER=postgres
  #     - DB_PASSWORD=postgres
  #     - TEMPORAL_HOST=temporal
  #     - TEMPORAL_PORT=7233
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #   volumes:
  #     - ./data:/app/data
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     - temporal
  #   networks:
  #     - reddit-recipes-network

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  reddit-recipes-network:
    driver: bridge
